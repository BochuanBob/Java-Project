import java.awt.Color;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

/**
 * Represents a specific kind of monster in the arcade game.
 *
 * @author deradaam,lub and verlaqd. Created Nov 6, 2015.
 */
public class Centipede extends Monster {

	protected int xDirection = 1; // 1 is right, -1 is left
	private int yDirection = 1; // 1 is down, -1 is up
	private double yShiftCount = 0;
	private boolean yShifting = false;
	private boolean poisoned = false;
	private static final double yShiftMax = GRID_SIZE / DEF_MONST_VEL;
	protected Mushroom ignoredMushroom;

	/**
	 * Constructs the Centipede at given position in the arcade game.
	 *
	 * @param game
	 * @param gridX
	 * @param gridY
	 */
	public Centipede(ArcadeGame game, double gridX, double gridY) {
		super(game, gridX, gridY);
		this.setColor(Color.BLACK);
		// System.outprintln("Making new centipede");
		game.numCentipedes++;
		this.bounty = 400;

	}

	/**
	 * Movement method. Basic movement overview:
	 * 1. If !yShifting, check next X. If it's clear, then move to that
	 * position. If not, make yShifting true.
	 * 2. If yShifting, then go in the specified direction (up or down) enough
	 * times to correctly travel one grid height.
	 * 3. Once done moving up or down, make yShifting false again.
	 * 
	 */

	@Override
	public void move() {
		double curX = this.getTLPoint().getX();
		double curY = this.getTLPoint().getY();
		double newX = curX;
		double newY = curY;

		// We want to move in the x direction IFF we're not going up or down

		if (!this.yShifting) {
			// Horizontal movement
			double nextX = curX + this.getVelocityX() * this.xDirection;
			newX = newX(curX, curY, nextX);

		} else {
			// Vertical movement
			double nextY = curY + this.getVelocityY() * this.yDirection;
			newY = newY(curX, curY, nextY);
		}

		// if poisoned...
		if (this.poisoned) {
			this.yDirection = 1;

			double nextY = curY + this.getVelocityY() * this.yDirection;
			// System.out.println(nextY);

			// end the poison streak
			if ((int) (nextY / GRID_SIZE) == 16) {
				this.poisoned = false;
				newY = curY;
				this.yDirection = -1;
			} else {
				newY = nextY;
			}
			newX = curX - (curX % ArcadeGame.GRID_SIZE);
		}
		this.setTLPoint(new Point2D.Double(newX, newY));

	}

	/**
	 * Chooses and returns new x. Flips x direction if it hits something or goes
	 * out of bounds, and initiates y shift.
	 * 
	 * @param curX
	 * @param curY
	 * @param nextX
	 * @return
	 */
	public double newX(double curX, double curY, double nextX) {

		Point2D curTL = this.getTLPoint();
		this.setTLPoint(new Point2D.Double(nextX, curY));

		Dieable intersectedObject = this.intersectsObject(this.getGame()
				.getMushrooms(), this.ignoredMushroom);

		if (this.getGame().inGameX(nextX, this.gap, this.width)
				&& intersectedObject == null) {
			this.setTLPoint(curTL);

			return nextX;
		}
		if (curX < 0)
			return nextX;
		if (intersectedObject != null) {
			Mushroom intersectedMushroom = (Mushroom) intersectedObject;
			if (intersectedMushroom.isPoisonous()) {
				this.poisoned = true;
				return curX;
			}
		}

		// flip x direction
		this.xDirection *= -1;
		// initiate y shift
		this.yShifting = true;
		this.setTLPoint(curTL);
		return curX;

	}

	/**
	 * Chooses and returns new y. Uses yShiftCount to ensure that we always end
	 * up on grid lines.
	 * 
	 * @param curX
	 * @param curY
	 * @param nextY
	 * @return
	 */

	public double newY(double curX, double curY, double nextY) {
		// System.out.println(curY + " " + nextY + " "
		// + this.getGame().getHeight());
		// System.out.println("C:"+curY+", N:"+nextY+", YSC:"+this.yShiftCount+"
		// (d:"+this.yDirection+")");

		// if we're NOT done yShifting, keep going
		if (this.yShiftCount < yShiftMax) {
			this.yShiftCount++;
			return nextY;
		}

		// If we ARE done yShifting...

		// reset yShiftCount
		this.yShiftCount = 0;
		// stop yShifting
		this.yShifting = false;

		// if we landed on top of a mushroom, we need to ignore it:
		this.ignoredMushroom = (Mushroom) this.intersectsObject(this.getGame()
				.getMushrooms());

		// If we're at the top or bottom, set direction accordingly and round
		// the y value to take care of boundary/pixel issues.
		if ((int) curY / GRID_SIZE == 16) {
			this.yDirection = -1;
			return 16 * GRID_SIZE;
		} else if ((int) curY / GRID_SIZE == 0) {
			this.yDirection = 1;
			return 0;
		}

		return curY;
	}

	/**
	 * make new mushroom on death
	 */
	@Override
	public void die() {
		int gridX = (int) this.getTLPoint().getX() / ArcadeGame.GRID_SIZE;
		int gridY = (int) this.getTLPoint().getY() / ArcadeGame.GRID_SIZE;
		Mushroom droppedMushroom = new Mushroom(this.getGame(), gridX, gridY);
		if (droppedMushroom.intersectsObject(droppedMushroom.getGame()
				.getMushrooms()) == null)
			this.getGame().addObject(droppedMushroom);
		this.getGame().numCentipedes--;
		this.getGame().removeObject(this);
	}

	/**
	 * Gets the shape of the Centipede.
	 * 
	 * @return
	 */
	@Override
	public Shape getShape() {
		double x = getTLPoint().getX();
		double y = getTLPoint().getY();
		return new Rectangle2D.Double(x + this.gap, y + this.gap, this.width,
				this.height);
	}

}
