import java.awt.geom.Point2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import javax.swing.JOptionPane;

/**
 * Represents the arcade game.
 *
 * @author deradaam, lub and verlaqd. Created Oct 28, 2015.
 */
public class ArcadeGame {

	protected boolean USE_IMAGES = true;

	protected Scoreboard scoreboard;
	protected int width;
	protected int height;
	protected static final int GRID_SIZE = 20;

	protected static final int TOP_PLAYER_AREA = 11;
	protected static final int BOTTOM_PLAYER_AREA = 16;

	protected int levelNum = 0;
	protected int score = 0;
	protected int lives = 2;

	protected static boolean fleasAllowed = false;
	protected static boolean scorpionsAllowed = false;

	protected int minNumMushrooms = 5;
	protected int mushroomsInPlayerArea = 0;

	protected int numFleas = 0;
	protected int numCentipedes = 0;
	protected int numSpiders = 0;
	protected static final int CENTIPEDE_BASE_NUM = 4;

	private int limitSpider = 250;
	protected int timeCountSpider = 0;
	

	private long lastLevelChange = System.currentTimeMillis();

	protected static Random rand = new Random();
	private boolean alreadyAddedScorpion = false;
	private boolean scorpionIsAlive = false;
	private long scorpionMinTime =  15000;
	private long lastScorpionTime=this.lastLevelChange;


	private int limitBonus = rand.nextInt(50) + 500;
	protected int timeBonus = 0;

	protected int numBomb = 5;

	protected boolean isPaused = false;
	private ArrayList<Dieable> mushrooms = new ArrayList<>();
	private ArrayList<Dieable> monsters = new ArrayList<>();
	private ArrayList<Dieable> projectiles = new ArrayList<>();
	private ArrayList<Dieable> bonuses = new ArrayList<>();
	private Ship ship;

	/**
	 * 
	 * Creates an ArcadeGame at level 1, with a new ship at grid location 10,16
	 * (centered on the second to last row)
	 *
	 * @param height
	 * @param width
	 * @throws IOException
	 */
	public ArcadeGame(int height, int width) throws IOException {
		this.height = height;
		this.width = width;
		this.ship = new Ship(this, 10, 16);
		createLevel(1);
	}

	/**
	 * Switches Pause state, changes frame title accordingly.
	 */

	public void pauseButtonHit() {
		if (this.isPaused) {
			this.unpause();
		} else {
			this.pause();
		}
	}

	public void pause() {
		this.isPaused = true;
		Main.changeTitle("PAUSED");
	}

	public void unpause() {
		this.isPaused = false;
		Main.changeTitle("Arcade Game!!");
	}

	/**
	 * 
	 * Paused/unpauses and displays/undisplays help screen
	 *
	 */
	@SuppressWarnings("unused")
	public void helpButtonHit() {
		this.pause();
		new HelpScreen();
	}

	/**
	 * Refreshs the counter to make Spider appear at the time we
	 * expect.
	 *
	 */
	public void refreshtimeCount() {
		if (this.timeCountSpider <= this.limitSpider && this.numSpiders == 0) {
			this.timeCountSpider++;
		}
		if (this.numSpiders != 0) {
			this.timeCountSpider = 0;
		}
		if (this.levelNum > 3) {
			this.timeBonus++;
		}
	}

	/**
	 * Create level based on a file. This should ONLY be used for the first
	 * level, or when manually changing levels with the U/D keys.
	 *
	 * @param levelNumber
	 * @throws FileNotFoundException
	 * @throws IOException
	 */

	@SuppressWarnings("resource")
	public void createLevel(int levelNumber) throws FileNotFoundException,
			IOException {

		int nextLevel = this.levelNum + levelNumber;

		if (nextLevel < 1 || nextLevel >= 7) {

			return;
		}

		Scanner input = new Scanner(System.in);
		String textFile = "l" + nextLevel + ".txt";
		this.levelNum = nextLevel;

		this.updateScoreboard();

		this.lastLevelChange = System.currentTimeMillis();
		this.lastScorpionTime=this.lastLevelChange;

		this.mushrooms.clear();
		this.monsters.clear();
		this.projectiles.clear();
		this.numCentipedes = 0;
		this.numFleas = 0;
		this.numSpiders = 0;
		this.alreadyAddedScorpion = false;
		this.scorpionIsAlive=false;
		this.mushroomsInPlayerArea = 0;
		this.timeBonus = 0;

		this.chooseMonsters();

		int gridY = 0;
		input = new Scanner(new File(textFile));
		while (input.hasNextLine()) {
			String row = input.nextLine();
			for (int gridX = 0; gridX < row.length(); gridX++) {
				if (row.charAt(gridX) == 'C') {
					this.addObject(new Centipede(this, gridX, gridY));
				}
				if (row.charAt(gridX) == 'M') {
					this.addObject(new Mushroom(this, gridX, gridY));
				}
			}
			gridY++;
		}

		input.close();
	}

	/**
	 * Restart the game.
	 * 
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public void restart() throws FileNotFoundException, IOException {
		this.setLevelNum(1);
		this.createLevel(0);
		this.isPaused = false;
		this.lives = 2;
		this.ship = new Ship(this, 10, BOTTOM_PLAYER_AREA);
		this.updateScoreboard();
	}

	/**
	 * 
	 * This function is called every refresh by the similarly named method in
	 * AGC.
	 *
	 */
	public void onEveryRefresh() {

		this.addNewMonsters();
		this.moveDieables();
		this.refreshtimeCount();
		this.addBonuses();
	}

	/**
	 * Updates the scoreboard
	 */
	public void updateScoreboard() {
		Main.scoreboard.changeLevel(this.levelNum);
		Main.scoreboard.changeLives(this.lives);
		Main.scoreboard.changeScore(this.score);
	}

	/**
	 * Moves the Dieables by calling their move() methods
	 */
	protected void moveDieables() {
		List<Dieable> dieableParts = this.getDieableParts();
		for (Dieable curDie : dieableParts) {
			curDie.move();
		}
	}

	/**
	 * Sees which monsters are allowed in this level. Called whenever we beat
	 * the current level, or change levels manually.
	 */

	public void chooseMonsters() {

		if (this.levelNum > 1) {
			fleasAllowed = true;
		} else {
			fleasAllowed = false;
		}
		if (this.levelNum > 3) {
			scorpionsAllowed = true;
		} else {
			scorpionsAllowed = false;
		}
		// System.out.println("Fleas: " + fleasAllowed);
		// System.out.println("Scorpions: " + scorpionsAllowed);
	}

	/**
	 * Adds allowed monsters. Called by the onEveryRefresh method.
	 * 
	 */
	public void addNewMonsters() {
		this.addSpiders();
		if (fleasAllowed)
			this.addFleas();
		if (scorpionsAllowed)
			this.addScorpions();
	}

	/**
	 * Creates a new Centipede starting at 0 and going to -i+1, heading right,
	 * with length i.
	 *
	 */
	public void newCentipede() {
		for (int i = 0; i < this.levelNum + CENTIPEDE_BASE_NUM; i++) {
			this.addObject(new Centipede(this, -i, 0));
		}
	}

	/**
	 * Figures out where we can put the flea and its mushrooms
	 *
	 * @return
	 */
	public void addFleas() {
		// To add a flea, there must be less than (a certain minimum number)
		// mushrooms in the player area. There also should not be any other
		// fleas.
		if (!(this.mushroomsInPlayerArea < this.minNumMushrooms && this.numFleas == 0)) {
			return;
		}
		boolean bothGood = false;
		while (!bothGood) {

			int initialX = rand.nextInt(GRID_SIZE);
			int mush1Y = rand.nextInt(TOP_PLAYER_AREA);
			int mush2Y = rand.nextInt(BOTTOM_PLAYER_AREA - TOP_PLAYER_AREA + 1)
					+ TOP_PLAYER_AREA - 1;

			Mushroom testMush1 = new Mushroom(this, initialX, mush1Y);
			Mushroom testMush2 = new Mushroom(this, initialX, mush1Y);
			if (testMush1.intersectsObject(this.mushrooms) == null
					&& testMush2.intersectsObject(this.mushrooms) == null) {
				testMush1.die();
				testMush2.die();
				this.addObject(new Flea(this, initialX, mush1Y, mush2Y));
				break;
			}
		}
	}

	/**
	 * Adds a Spider to the game.
	 */
	public void addSpiders() {
		if (this.numSpiders == 0 && this.timeCountSpider > this.limitSpider) {
			this.addObject(new Spider(this));
		}
	}

	/**
	 * Adds a Bonus to the game.
	 *
	 */
	public void addBonuses() {
		if (this.timeBonus >= this.limitBonus) {
			this.addObject(new Bonus(this));
			this.timeBonus = 0;
			this.limitBonus = rand.nextInt(200) + 300;
		}
	}

	/**
	 * Adds a scorpion to the game if there aren't already any and we've reached
	 * the time limit.
	 * 
	 * @return
	 */
	public void addScorpions() {
		if ((!this.alreadyAddedScorpion) && (!this.scorpionIsAlive)) {
			if (System.currentTimeMillis() - this.lastScorpionTime > this.scorpionMinTime) {

				int yGrid = rand.nextInt(TOP_PLAYER_AREA - 1) + 1;

				this.addObject(new Scorpion(this, 0, yGrid));
			}
		}
	}

	/**
	 * Adds a Dieable (Monster, Mushroom, or Projectile) to the appropriate list
	 * of the ArcadeGame
	 *
	 * @param objToAdd
	 */
	public void addObject(Dieable objToAdd) {
		if (objToAdd instanceof Monster) {
			this.monsters.add(objToAdd);
			if (objToAdd instanceof Centipede) {
				this.numCentipedes++;
			} else if (objToAdd instanceof Flea) {
				this.numFleas++;
			} else if (objToAdd instanceof Scorpion) {
				this.alreadyAddedScorpion = true;
				this.scorpionIsAlive=true;
			} else if (objToAdd instanceof Spider) {
				this.numSpiders++;
			}
		}
		if (objToAdd instanceof Projectile) {
			this.projectiles.add(objToAdd);
		}
		if (objToAdd instanceof Mushroom) {

			this.mushrooms.add(objToAdd);
		}
		if (objToAdd instanceof Bonus) {

			this.bonuses.add(objToAdd);
		}

	}

	public int countBomb() {
		int number = 0;
		for (Dieable bomb : this.projectiles) {
			if (bomb instanceof Bomb) {
				number++;
			}
		}
		return number;
	}

	/**
	 * Performs the appropriate actions when the player beats a level
	 */

	public void nextLevel() {
		this.levelNum++;
		Main.scoreboard.changeLevel(this.levelNum);
		this.numCentipedes = 0;
		this.timeBonus = 0;
		this.alreadyAddedScorpion=false;
		this.newCentipede();
		this.chooseMonsters();
		this.lastLevelChange = System.currentTimeMillis();
	}

	/**
	 * 
	 * Reset monster counts to zero. Used on player death.
	 *
	 */
	public void resetMonsterCounts() {
		this.numCentipedes = 0;
		this.numSpiders = 0;
		this.alreadyAddedScorpion = false;
		this.numFleas = 0;
	}

	/**
	 * Removes the specified mushroom/monster/projectile.
	 *
	 * @param objToRemove
	 */
	public void removeObject(Dieable objToRemove) {
		if (objToRemove instanceof Monster) {
			this.monsters.remove(objToRemove);
			// System.out.println("CC: " + this.numCentipedes);
			if (objToRemove instanceof Centipede) {
				this.numCentipedes--;
			} else if (objToRemove instanceof Flea) {
				this.numFleas--;
			} else if (objToRemove instanceof Spider) {
				this.numSpiders--;
			}else if(objToRemove instanceof Scorpion){
				this.scorpionIsAlive=false;
				this.lastScorpionTime=System.currentTimeMillis();
			}

			if (this.numCentipedes <= 0) {
				this.nextLevel();
			}
		}
		if (objToRemove instanceof Projectile) {
			this.projectiles.remove(objToRemove);
		}
		if (objToRemove instanceof Mushroom) {
			this.mushrooms.remove(objToRemove);
		}
		if (objToRemove instanceof Ship) {
			this.playerDied();

		}
		if (objToRemove instanceof Bonus) {
			this.bonuses.remove(objToRemove);
		}
		Main.scoreboard.changeScore(this.score);
	}

	/**
	 * Handles what should happen if the player is killed.
	 *
	 */
	public void playerDied() {

		// if there are no more lives left, game over
		if (this.lives < 0) {
			System.out.println("game over");
			System.out.println("You Scores are: " + this.score);
			String nameString = JOptionPane
					.showInputDialog("What is your name?");
			HighestScoresBoard board = new HighestScoresBoard(this, nameString,
					this.score);
			try {
				board.showResult();
			} catch (FileNotFoundException exception) {
				exception.printStackTrace();
			}

			this.isPaused = true;
			this.ship.setTLPoint(new Point2D.Double(-100, -100));
		} else {
			// decrease lives remaining
			this.lives--;
			// reset ship to center
			this.ship = new Ship(this, 10, BOTTOM_PLAYER_AREA);
			// clear monsters
			this.monsters.clear();
			this.projectiles.clear();
			// reset centipede count
			this.resetMonsterCounts();
			this.timeBonus = 0;

			// Mushrooms should be restored to full health if damaged and made
			// not poisonous
			for (Dieable currentMushroom : this.mushrooms) {
				currentMushroom.setHealth(Mushroom.DEFAULT_MUSHROOM_HEALTH);
				((Mushroom) currentMushroom).setPoisonous(false);
				currentMushroom.bounty = 1;
			}
			// initialize new Centipede
			this.newCentipede();
		}
		Main.scoreboard.changeLives(this.lives);
	}

	/**
	 * Checks if the specified point is in the game (one for x, one for y)
	 *
	 * @param X
	 * @param obWidth
	 * @param gap
	 * @return
	 */
	public boolean inGameX(double X, double gap, double obWidth) {
		// System.out.println(X+" "+this.width);
		if (0 - 1 <= X && X + 2 * gap + obWidth <= this.width)
			return true;
		return false;
	}

	public boolean inGameY(double Y) {
		if (0 <= Y && Y <= this.height + 4)
			return true;
		// if (0 - 1 <= Y && Y+2*gap*obHeight < this.height)
		return false;
	}

	// ////// GETTERS AND SETTERS ////// //

	public int getHeight() {
		return this.height;
	}

	public void setLevelNum(int levelNum) {
		this.levelNum = levelNum;
	}

	public boolean isPaused() {
		return this.isPaused;
	}

	public void setPaused(boolean isPaused) {
		this.isPaused = isPaused;
	}

	public ArrayList<Dieable> getMushrooms() {
		return this.mushrooms;
	}

	public ArrayList<Dieable> getMonsters() {
		return this.monsters;
	}

	public ArrayList<Dieable> getProjectiles() {
		return this.projectiles;
	}

	public Ship getShip() {
		return this.ship;
	}

	/**
	 * Returns a list of all Drawables (monsters, mushrooms, projectiles, ship)
	 *
	 * @return
	 */
	public ArrayList<Drawable> getDrawableParts() {

		ArrayList<Drawable> drawables = new ArrayList<>();
		drawables.addAll(this.monsters);
		drawables.addAll(this.mushrooms);
		drawables.addAll(this.projectiles);
		drawables.addAll(this.bonuses);
		drawables.add(this.ship);

		return drawables;
	}

	/**
	 * Returns a list of all Dieables (monsters, mushrooms, projectiles, ship)
	 *
	 * @return
	 */
	public ArrayList<Dieable> getDieableParts() {

		ArrayList<Dieable> dieables = new ArrayList<>();
		dieables.addAll(this.monsters);
		dieables.addAll(this.mushrooms);
		dieables.addAll(this.projectiles);
		dieables.addAll(this.bonuses);
		dieables.add(this.ship);

		return dieables;
	}
}
