import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import javax.swing.JComponent;

/**
 * This class represents the game board. It can draw a graphical rendering of
 * its current state and can calculate its next state.
 * 
 * @author lub, verlaqd. Created Sep 24, 2008.
 */
public class GameOfLife extends JComponent {
	private static final int MAX_ROWS = 90;
	private static final int MAX_COLUMNS = 90;
	private static final double DOT_SIZE = 7;

	/*
	 * TODO 1: Decide how you'll represent the state of the game board. That is,
	 * what field(s) do you need?
	 */

	public int[][] cellArray = new int[MAX_ROWS][MAX_COLUMNS];

	/**
	 * Constructs a new game board from the list of initially occupied
	 * coordinates. Takes the row and column values of each coordinate in the
	 * given ArrayList of initial cells and changes the corresponding cellArray
	 * entries to 1.
	 * 
	 * @param initialCells
	 */
	public GameOfLife(ArrayList<Coordinates> initialCells) {
		/*
		 * Document, test, and implement this constructor that takes an
		 * ArrayList<Coordinates> specifying all the initially occupied squares
		 * on the game board. The Coordinates class is provided. NOTE: You will
		 * probably need a "smart" constructor. Instead of just storing
		 * initialCells, you'll need to convert to whatever representation you
		 * chose in the previous to-do item.
		 */

		for (Coordinates curCoord : initialCells) {
			int pointX = curCoord.getColumn();
			int pointY = curCoord.getRow();

			this.cellArray[pointY][pointX] = 1;

		}
	}

	/**
	 * @param row
	 * @param column
	 * @return whether or not the square in the given row and column is occupied
	 */
	public boolean isOccupied(int row, int column) {
		/*
		 * Document, test, and implement this method that detects whether a
		 * particular square is occupied.
		 */
		if (this.cellArray[row][column] == 1) {
			return true;
		}
		return false;
	}

	/**
	 * Counts the number of occupied cells around the given square.
	 * 
	 * @param row
	 * @param column
	 * @return the number of occupied cells
	 */
	public int getNeighborCount(int row, int column) {
		/*
		 * TODO 5: Document, test, and implement this method that takes a row
		 * and column and returns the number of occupied neighbor squares.
		 */

		/*
		 * Needs to wrap around
		 */
		int count = 0;
			for (int i = -1; i <= 1; i++) {
				for (int j = -1; j <= 1; j++) {
					if (cellArray[(row + i+MAX_ROWS)%MAX_ROWS][(column + j+MAX_COLUMNS)%MAX_COLUMNS] == 1) {
						count++;
					}
				}
			}
		if (cellArray[row][column] == 1) {
			return count - 1;
		}
		return count;
	}

	/**
	 * Updates the state of this game board for the next generation.
	 */
	public void nextGeneration() {
		/*
		 * TODO 6: Document, test, and implement this method that calculates the
		 * occupied squares for the next generation of this game. See p. 332 of
		 * Big Java, or the class slides for the rules. You'll need to use
		 * temporary storage to hold the next generation information as you
		 * calculate it.
		 */

		/*
		 * another int[][], initially zeroes fill the new int[][] based on the
		 * old one's calculations (using getNeighborCount) make cellArray equal
		 * to the new int
		 */
		int[][] newCellArray = new int[MAX_ROWS][MAX_COLUMNS];
		for (int i = 0; i < MAX_ROWS; i++) {
			for (int j = 0; j < MAX_COLUMNS; j++) {
				if (this.cellArray[i][j] == 1) {
					if (getNeighborCount(i, j) >= 2 && getNeighborCount(i, j) < 4) {
						newCellArray[i][j] = 1;
					}
				} else {
					if (getNeighborCount(i, j) == 3) {
						newCellArray[i][j] = 1;
					}
				}
			}
		}
		this.cellArray = newCellArray;
	} 

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		for (int i = 0; i < MAX_ROWS; i++) {
			for (int j = 0; j < MAX_COLUMNS; j++) {
				if (this.cellArray[i][j] == 1) {

					Rectangle2D.Double cell = new Rectangle.Double(j * DOT_SIZE, i * DOT_SIZE, DOT_SIZE, DOT_SIZE);
					g2.setColor(Color.black);
					g2.fill(cell);
				}
			}
		}
		/*
		 * TODO 3: Implement this method to draw the game board. You don't have
		 * to draw the grid if you don't want, just the occupied cells.
		 */

	}

}
